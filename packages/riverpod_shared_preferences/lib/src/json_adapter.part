import 'dart:async';
import 'dart:convert';

import 'package:riverpod/persist.dart';
import 'package:riverpod/riverpod.dart';
import 'package:riverpod/src/common/result.dart';
import 'package:shared_preferences/shared_preferences.dart';

// From you:

class MyPersist extends Persist {
  MyPersist({this.sharedPreferences});

  final SharedPreferences? sharedPreferences;
}

// Users define:

void main() async {
  final sharedPrefs = await SharedPreferences.getInstance();
  final container = ProviderContainer(
    persist: MyPersist(sharedPreferences: sharedPrefs),
  );
}

class Model {
  Model();
  factory Model.fromJson(Map json) {}

  Map toJson() => {};
}

typedef Json = String;

abstract class _$ModelNotifier implements OfflineNotifier<Model, Json> {}

@Riverpod()
@JsonPersist()
class ModelNotifier extends _$ModelNotifier with _$ModelNotifierPersist {
  @override
  Model build() => Model();
}

//  ==========

class Generic<T extends num> {
  factory Generic.fromJson(Map json, T Function(Map) fromJsonT) => Generic<T>();

  Map toJson(Map Function(T) toJsonT) => {};
}

@Riverpod()
class GenericNotifier<T extends num> extends _$GenericNotifier<T>
    with _$GenericNotifierPersist<T> {
  @override
  T build() => 42 as T;

  @override
  T fromJsonT(Object? json) {}

  @override
  Object? toJsonT(T value) {}
}

// ==========

// You generate

mixin _$ModelNotifierPersist on _$ModelNotifier
    implements OfflineNotifier<Model, Json> {
  @override
  Object? get offlineKey =>
      'riverpod_shared_preferences/src/json_adapter.dart#ModelNotifier()';

  @override
  FutureOr<Model> decode(Json value) {
    final json = jsonDecode(value) as Map;
    return Model.fromJson(json);
  }

  @override
  FutureOr<Json> encode(Model value) {
    final json = value.toJson();
    return jsonEncode(json);
  }
}

mixin _$GenericNotifierPersist<T extends num> on _$GenericNotifier<T>
    implements OfflineNotifier<Generic<T>, Json> {
  @override
  Object? get offlineKey =>
      'riverpod_shared_preferences/src/json_adapter.dart#GenericNotifier($T)';

  T fromJsonT(Object? json);
  /* JSON types need to be picked up from the Model.fromJson method */
  Map<String, Object?> toJsonT(T value);

  @override
  FutureOr<Generic<T>> decode(Json value) {
    final json = jsonDecode(value) as Map;
    return Generic<T>.fromJson(json, fromJsonT);
  }

  @override
  FutureOr<Json> encode(Generic<T> value) {
    final json = value.toJson(toJsonT);
    return jsonEncode(json);
  }
}
