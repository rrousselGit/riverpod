Message: `Specify "dependencies"`
Priority: 100
Diff for file `test/lints/provider_dependencies/missing_dependencies2.dart:32`:
```

// expect_lint: provider_dependencies
- @riverpod
+ @Riverpod(dependencies: [generatedScoped])
int watchGeneratedScopedButNoDependencies(
  Ref ref,
```
---
Message: `Update "dependencies"`
Priority: 100
Diff for file `test/lints/provider_dependencies/missing_dependencies2.dart:58`:
```

// expect_lint: provider_dependencies
- @Riverpod(dependencies: [])
+ @Riverpod(dependencies: [generatedScoped])
int watchGeneratedScopedButEmptyDependencies(
  Ref ref,
```
---
Message: `Update "dependencies"`
Priority: 100
Diff for file `test/lints/provider_dependencies/missing_dependencies2.dart:88`:
```

// expect_lint: provider_dependencies
- @Riverpod(dependencies: [dep])
+ @Riverpod(dependencies: [dep, generatedScoped])
int watchGeneratedScopedButMissingDependencies(
  Ref ref,
```
---
Message: `Remove "dependencies"`
Priority: 100
Diff for file `test/lints/provider_dependencies/missing_dependencies2.dart:118`:
```
}

- @Riverpod(
-   dependencies:
-       // The dependency is redundant because it is not a scoped provider
-       // expect_lint: provider_dependencies
-       [
-     generatedRoot,
-   ],
- )
+ @riverpod
int watchGeneratedRootAndContainsDependency(
  Ref ref,
```
---
Message: `Update "dependencies"`
Priority: 100
Diff for file `test/lints/provider_dependencies/missing_dependencies2.dart:137`:
```
    // generatedRoot is extra
    // expect_lint: provider_dependencies
-     [
-   dep,
-   generatedRoot,
+     [dep])
int specifiedDependencyButNeverUsed(Ref ref) {
  ref.watch(depProvider);
```
---
Message: `Remove "dependencies"`
Priority: 100
Diff for file `test/lints/provider_dependencies/missing_dependencies2.dart:217`:
```
class MemberDependencies {
  // expect_lint: provider_dependencies
-   @Dependencies([dep])
+   
  int build() => 0;
}
```
---
Message: `Update "dependencies"`
Priority: 100
Diff for file `test/lints/provider_dependencies/missing_dependencies2.dart:225`:
```
class CanUpdateMultipleDependenciesAtOnce {
  // expect_lint: provider_dependencies
-   @Dependencies([])
+   @Dependencies([dep])
  int build(WidgetRef ref) {
    ref.watch(depProvider);
```
---
Message: `Update "dependencies"`
Priority: 100
Diff for file `test/lints/provider_dependencies/missing_dependencies2.dart:222`:
```

// expect_lint: provider_dependencies
- @Dependencies([])
+ @Dependencies([dep])
class CanUpdateMultipleDependenciesAtOnce {
  // expect_lint: provider_dependencies
```
---
Message: `Remove "dependencies"`
Priority: 100
Diff for file `test/lints/provider_dependencies/missing_dependencies2.dart:245`:
```
// Handle identifiers with dependencies
// expect_lint: provider_dependencies
- @Dependencies([dep])
+ 
void fn() {}

```
---
Message: `Specify "dependencies"`
Priority: 100
Diff for file `test/lints/provider_dependencies/missing_dependencies2.dart:249`:
```

// expect_lint: provider_dependencies
- void fn2() {
+ @Dependencies([dep])
+ void fn2() {
  fn();
}
```
---
Message: `Specify "dependencies"`
Priority: 100
Diff for file `test/lints/provider_dependencies/missing_dependencies2.dart:257`:
```

// expect_lint: provider_dependencies
- @riverpod
+ @Riverpod(dependencies: [dep])
int foo(Ref ref) {
  fn();
```
---
Message: `Specify "dependencies"`
Priority: 100
Diff for file `test/lints/provider_dependencies/missing_dependencies2.dart:274`:
```

// expect_lint: provider_dependencies
- class WidgetDependencies2 extends StatelessWidget {
+ @Dependencies([dep])
+ class WidgetDependencies2 extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
```
---
Message: `Update "dependencies"`
Priority: 100
Diff for file `test/lints/provider_dependencies/missing_dependencies2.dart:305`:
```

// expect_lint: provider_dependencies
- @Dependencies([])
+ @Dependencies([dep])
class Stateful2 extends StatefulWidget {
  const Stateful2({super.key});
```
---
Message: `Specify "dependencies"`
Priority: 100
Diff for file `test/lints/provider_dependencies/missing_dependencies2.dart:321`:
```

// expect_lint: provider_dependencies
- class FindStateFromClassList extends StatefulWidget {
+ @Dependencies([dep])
+ class FindStateFromClassList extends StatefulWidget {
  const FindStateFromClassList({super.key});

```
---
Message: `Specify "dependencies"`
Priority: 100
Diff for file `test/lints/provider_dependencies/missing_dependencies2.dart:334`:
```

// expect_lint: provider_dependencies
- @riverpod
+ @Riverpod(dependencies: [anotherNonEmptyScoped])
int crossFileDependency(Ref ref) {
  ref.watch(anotherNonEmptyScopedProvider);
```
---
